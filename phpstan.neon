includes:
    - vendor/phpstan/phpstan-strict-rules/rules.neon

parameters:
    ignoreErrors:
        # Symfony Config component
        - '#expects Symfony\\Component\\Config\\Definition\\Builder\\ArrayNodeDefinition, Symfony\\Component\\Config\\Definition\\Builder\\NodeDefinition given#'
        - '#Call to an undefined method Symfony\\Component\\Config\\Definition\\Builder\\NodeDefinition::requiresAtLeastOneElement\(\)#'
        - '#Call to an undefined method Symfony\\Component\\Config\\Definition\\Builder\\NodeDefinition::addDefaultsIfNotSet\(\)#'
        - '#Call to an undefined method Symfony\\Component\\Config\\Definition\\Builder\\NodeDefinition::children\(\)#'

        # Doctrine DBAL & Migrations
        - '#Cannot call method fetchAll\(\) on Doctrine\\DBAL\\Driver\\Statement\|int#'
        - '#expects string\|null, Doctrine\\DBAL\\Query\\Expression\\CompositeExpression given#'
        - '#Class Doctrine\\DBAL\\Migrations\\AbstractMigration not found.#'

        # Compatibility with Symfony 2.8
        - '#Call to function method_exists#'

        # Compatibility with Symfony 3.4
        - '#Netgen\\Bundle\\BlockManagerBundle\\DependencyInjection\\TreeBuilder::__construct\(\) does not call parent constructor#'
        - '#Parameter \#(1|2) \$\w+ of method Symfony\\Component\\EventDispatcher\\EventDispatcherInterface::dispatch\(\) expects .+, .+ given.#'

        # Netgen Layouts specifics
        - '#Call to an undefined method Netgen\\BlockManager\\Block\\BlockDefinition\\BlockDefinitionHandlerInterface::getPlaceholderIdentifiers\(\).#'
        - '#Call to an undefined method Netgen\\BlockManager\\Block\\BlockDefinition\\BlockDefinitionHandlerInterface::getTwigBlockName\(\).#'
        - '#Parameter \#2 \$value of class Symfony\\Component\\Security\\Csrf\\CsrfToken constructor expects string\|null, array<string>\|string\|null given.#'
        - '#Property Netgen\\BlockManager\\Persistence\\Values\\.+::\$\w+ \(int\|string\) does not accept null.#'
        -
            message: '#Else branch is unreachable because ternary operator condition is always true.#'
            path: lib/Core/Validator/LayoutValidator.php

        - '#Call to function is_string\(\) with string will always evaluate to true.#'
        - '#Call to function is_array\(\) with array will always evaluate to true.#'
        - '#Call to function is_object\(\) with object will always evaluate to true.#'
        - '#Instanceof between Netgen\\BlockManager\\API\\Values\\ParameterStruct and Netgen\\BlockManager\\API\\Values\\ParameterStruct will always evaluate to true.#'
        - '#Instanceof between Netgen\\BlockManager\\Block\\BlockDefinitionInterface and Netgen\\BlockManager\\Block\\BlockDefinitionInterface will always evaluate to true.#'

        -
            message: '#Property Netgen\\BlockManager\\Serializer\\Normalizer::\$normalizer has no typehint specified.#'
            path: lib/Serializer/Normalizer.php

        -
            message: '#Variable property access on object.#'
            path: lib/Utils/Hydrator.php

        -
            message: '#should be contravariant with parameter \$value#'
            path: lib/Transfer/Output/Visitor/
